package alda;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MyGraph<T extends Comparable<? super T>> implements MiniGraph<T> {
	
	private HashMap<T, Integer> nodeMap = new HashMap<T, Integer>();
	private ArrayList<Edge> adjList = new ArrayList<Edge>();
	private int NUMBER_OF_NODES = 0;
	private int NUMBER_OF_EDGES = 0;
	private int TOTAL_EDGE_WEIGHT = 0;
	

	private class Edge{
		public int Destination;
		public int Weight;	
		public Edge(int n1, int w){
			this.Destination = n1;	
			this.Weight = w;		
		}
	}
		
	@Override
	public void addNode(T n) {
		if(nodeMap.get(n) == null){
	        nodeMap.put(n, NUMBER_OF_NODES++);	
		}
	}

	@Override
	public void removeNode(T n) {    
		if(nodeMap.remove(n) != null){
			NUMBER_OF_NODES--;
		}       
	}

	public void connectNodes(T n1, T n2, int weight) {
		Integer a = (Integer) nodeMap.get(n1);
		Integer b = (Integer) nodeMap.get(n2);
		
		if(a != null && b != null ){
			Edge e = new Edge(a, weight);
			adjList.add(b, e);
			e = new Edge(b, weight);
			adjList.add(a, e);
		}

	}

	@Override
	public void disconnectNodes(T n1, T n2) {

	}

	@Override
	public boolean contains(T n) {
		Integer node = (Integer) nodeMap.get(n);
		//System.out.println(node);
		boolean found = false;
		if(node != null){
			found=  true;
		}
		return found;
	}

	@Override
	public int getNumberOfNodes() {

		return NUMBER_OF_NODES;
	}

	@Override
	public boolean edgeExistsBetween(T n1, T n2) {
		Integer a = (Integer) nodeMap.get(n1);
		Integer b = (Integer) nodeMap.get(n2);
		System.out.println(a +" , "+ b );
		if(a != null && b != null ){
			Edge r = adjList.get(b);
			Edge h = adjList.get(a);
			//System.out.println(a + ":" + r.Destination + " , "+ b + ":" + h.Destination);
			if(r.Destination == b && h.Destination == a){
				return true;
			}
			else{
				return false;
			}
		}
		else{
			return false;
		}
	}

	@Override
	public int getNumberOfEdges() {
		return NUMBER_OF_EDGES;
	}

	@Override
	public int getTotalEdgeWeight() {
		return TOTAL_EDGE_WEIGHT;
	}

	@Override
	public MiniGraph generateMinimumSpanningTree() {
		// TODO Auto-generated method stub
		return null;
	}

}
