package alda;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MyGraph<T extends Comparable<? super T>> implements MiniGraph<T> {
	
	private HashMap<T, Integer> nodeMap = new HashMap<T, Integer>();
	private ArrayList<Edge> Edges = new ArrayList<Edge>();
	private int NUMBER_OF_NODES = 0;
	private int NUMBER_OF_EDGES = 0;
	private int TOTAL_EDGE_WEIGHT = 0;
	
	private class Edge {
		public T Source;
		public T Destination;
		public int Weight;
		
		public Edge(T n1, T n2, int w){
			this.Source = n1;
			this.Destination = n2;	
			this.Weight = w;		
		}
	}
	
	
	@Override
	public void addNode(T n) {
		if(nodeMap.get(n) == null){
	        nodeMap.put(n,NUMBER_OF_NODES++);		        
		}
	}

	@Override
	public void removeNode(T n) {    
		if(nodeMap.remove(n) != null){
			NUMBER_OF_NODES--;
		}       
	}

	public void connectNodes(T n1, T n2, int weight) {

	}

	@Override
	public void disconnectNodes(T n1, T n2) {


	}

	@Override
	public boolean contains(T n) {
		T node = nodeMap.get(n);
		boolean found = false;
		if(node != null){
			found=  true;
		}
		return found;
	}

	@Override
	public int getNumberOfNodes() {

		return NUMBER_OF_NODES;
	}

	@Override
	public boolean edgeExistsBetween(T n1, T n2) {
		boolean found = false;
		for(int x= 0; x < Edges.size(); x++){
			Edge edge = (Edge)Edges.get(x);
			if((edge.Source == n1 || edge.Destination == n1 )&& (edge.Source == n2 || edge.Destination == n2)){
				found = true;
				break;
			}
		}
		return found;
	}

	@Override
	public int getNumberOfEdges() {
		return NUMBER_OF_EDGES;
	}

	@Override
	public int getTotalEdgeWeight() {
		return TOTAL_EDGE_WEIGHT;
	}

	@Override
	public MiniGraph generateMinimumSpanningTree() {
		// TODO Auto-generated method stub
		return null;
	}

}
