package alda;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MyGraph<T extends Comparable<? super T>> implements MiniGraph<T> {
	
	private HashMap<T, Node> nodeMap = new HashMap<T, Node>();
	private ArrayList<Edge> adjList = new ArrayList<Edge>();

	private int NUMBER_OF_NODES = 0;
	private int NUMBER_OF_EDGES = 0;
	private int TOTAL_EDGE_WEIGHT = 0;
	
	@SuppressWarnings("unused")
	private class Node{
		private ArrayList<Edge> Edges = new ArrayList<Edge>();	
		private T Data;
		private int Position;
		
		public Node(T n, int p){
			this.Data = n;
			this.Position = p;
		}
	}
	
	@SuppressWarnings("unused")
	private class Edge{
		public int Weight;
		public int Direction;
		
		public Edge(int p, int w){
			this.Direction = p;
			this.Weight = w;
		}
	}
		
	@Override
	public void addNode(T n) {
		if(nodeMap.get(n) == null){
			Node n1 = new Node(n, NUMBER_OF_NODES++);
			nodeMap.put(n, n1);
		}
	}

	@Override
	public void removeNode(T n) {    
		Node node = nodeMap.get(n);
		if(node != null){
			int weight = 0;
			for(int x = 0; x < node.Edges.size(); x++){
				weight += node.Edges.get(x).Weight;
				NUMBER_OF_EDGES--;
			}
			TOTAL_EDGE_WEIGHT -= weight;
			//NUMBER_OF_NODES--;
		}
	}

	public void connectNodes(T n1, T n2, int weight) {
		Node nodeA = nodeMap.get(n1);
		Node nodeB = nodeMap.get(n2);
		if(nodeB!=null && nodeA != null && checkEdges(nodeA, nodeB) && weight >= 0){
			Edge edgeA = new Edge(nodeB.Position, weight);
			Edge edgeB = new Edge(nodeA.Position, weight);
			nodeB.Edges.add(edgeB);
			nodeA.Edges.add(edgeA);
			NUMBER_OF_EDGES++;
			TOTAL_EDGE_WEIGHT += weight;
		}		
	}
	//Byt Namn
	public boolean checkEdges(Node n1, Node n2){
		for(int x=0;x < n1.Edges.size(); x++ ){
			if(n1.Edges.get(x).Direction == n2.Position){
				return false;
			}
		}
		for(int x=0;x < n2.Edges.size(); x++ ){
			if(n2.Edges.get(x).Direction == n1.Position){
				return false;
			}
		}
		return true;
	}
	//Byt Namn
	public boolean checkEdgeExists(Node n1, Node n2){
		boolean bool = false;
		for(int x=0;x < n1.Edges.size(); x++ ){
			if(n1.Edges.get(x).Direction == n2.Position){
				bool = true;
			}
		}
		for(int x=0;x < n2.Edges.size(); x++ ){
			if(n2.Edges.get(x).Direction == n1.Position){
				bool = true;
			}
		}
		return bool;
	}
	
	@Override
	public void disconnectNodes(T n1, T n2) {

	}

	@Override
	public boolean contains(T n) {
		return nodeMap.get(n) != null;
	}

	@Override
	public int getNumberOfNodes() {
		return NUMBER_OF_NODES;
	}

	@Override
	public boolean edgeExistsBetween(T n1, T n2) {
		Node nodeA = nodeMap.get(n1);
		Node nodeB = nodeMap.get(n2);
		if(nodeA != null && nodeB != null){
			return checkEdgeExists(nodeA, nodeB);
		}
		
		return false;
	}

	@Override
	public int getNumberOfEdges() {
		return NUMBER_OF_EDGES;
	}

	@Override
	public int getTotalEdgeWeight() {
		return TOTAL_EDGE_WEIGHT;
	}

	@Override
	public MiniGraph generateMinimumSpanningTree() {
		// TODO Auto-generated method stub
		return null;
	}

}
